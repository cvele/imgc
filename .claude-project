# Claude Project Configuration for imgc

## Project Context
This is the imgc (Intelligent Image Compression Watcher) project - a Python application that watches directories for new image files and automatically compresses them while preserving quality.

## Current State
- **Version**: 0.0.2 (in development)
- **Language**: Python 3.8+
- **Status**: Feature-complete with comprehensive test suite
- **Platforms**: Windows, macOS, Linux (cross-platform)
- **Build System**: Makefile + GitHub Actions
- **Test Coverage**: 27 tests, all passing

## Key Features
- Real-time file system monitoring using watchdog
- Automatic image compression (JPEG, PNG, WebP, AVIF)
- Two operating modes: watch-only (default) and scan+watch (--process-existing)
- Multi-threaded processing with configurable workers
- Cross-platform PyInstaller binary builds
- Comprehensive configuration via CLI args and environment variables

## Architecture Overview
```
imgc/
├── main.py              # CLI entry point, argument parsing, path validation
├── imgc/
│   ├── watcher.py       # Core file watching, event handling, threading
│   ├── compressor.py    # Image compression algorithms and optimization
│   ├── config.py        # Centralized configuration defaults
│   ├── cli.py           # Alternative CLI interface
│   └── logging_config.py # Logging setup and configuration
├── tests/               # Comprehensive test suite (27 tests)
├── .github/workflows/   # CI/CD for cross-platform releases
└── Makefile            # Primary build system interface
```

## Recent Changes (v0.0.2)
- Added --process-existing flag for optional initial image processing
- Fixed Windows path handling for trailing backslashes
- Improved PyInstaller builds with better PIL dependency inclusion
- Enhanced test coverage with 10 new tests
- Refactored environment variable parsing for better maintainability
- Added comprehensive documentation and GitHub Actions workflows

## Development Workflow
- **Setup**: `make install` (creates venv, installs dependencies)
- **Testing**: `make test` (runs all 27 tests)
- **Running**: `make run ARGS="--root /path/to/watch"`
- **Building**: `make build` (creates standalone binary)
- **Releasing**: `make release VERSION=v1.0.0`

## Key Design Principles
1. **Cross-platform compatibility**: Works on Windows, macOS, Linux
2. **Makefile-first**: All operations go through Makefile
3. **Testability**: Extract pure functions, avoid complex mocking
4. **User-friendly**: Clear error messages, helpful documentation
5. **Performance**: Efficient file watching, optional batch processing
6. **Reliability**: Timeout handling, graceful shutdown, error recovery

## Current Focus Areas
- Ensuring robust cross-platform releases
- Maintaining high test coverage
- Optimizing performance for large image directories
- Improving user experience and documentation

## Technical Debt and Improvement Opportunities
- Consider adding configuration file support (.imgcrc)
- Potential for plugin architecture for additional image formats
- Performance profiling for large directory scanning
- Integration tests with real image files

## Dependencies
- **Core**: watchdog, Pillow, pytest
- **Build**: PyInstaller
- **Optional**: imageio (for AVIF), pngquant (external binary)

## Common Tasks
When working on this project, common requests might include:
- Adding new image format support
- Improving compression algorithms
- Enhancing cross-platform compatibility
- Adding new configuration options
- Optimizing performance
- Fixing platform-specific issues
- Improving test coverage
- Updating documentation

## Code Quality Standards
- Type hints required for all functions
- Comprehensive error handling with logging
- Cross-platform path handling with pathlib.Path
- Timeout implementation for long operations
- Proper resource cleanup (threads, file handles)
- Environment variable support for all configuration
- Comprehensive test coverage for new features

## Release Information
- Automated releases via GitHub Actions on tag creation
- Builds for Windows, Linux, macOS (x64 and ARM64)
- Includes checksums and auto-generated changelogs
- Pre-release detection for alpha/beta/rc versions
- MIT License

This project is well-structured, thoroughly tested, and ready for production use.
