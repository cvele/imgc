# AI Context for imgc Project

## Project Summary
imgc (Intelligent Image Compression Watcher) is a production-ready Python application that automatically compresses images in real-time as they're created or modified in watched directories.

## Key Characteristics
- **Mature**: Comprehensive test suite (27 tests), full documentation, CI/CD
- **Cross-platform**: Windows, macOS, Linux with proper path handling
- **Performance-focused**: Multi-threaded, timeout handling, efficient file watching
- **User-friendly**: Clear error messages, flexible configuration, helpful documentation
- **Production-ready**: Standalone binaries, automated releases, MIT licensed

## Technical Stack
- **Runtime**: Python 3.8+, Pillow, watchdog
- **Build**: PyInstaller, Makefile, GitHub Actions
- **Testing**: pytest with comprehensive mocking and fixtures
- **Documentation**: README, CHANGELOG, copilot instructions

## Development Philosophy
1. **Makefile-first**: All operations (install, test, build, release) go through Makefile
2. **Test-driven**: Every feature has comprehensive test coverage
3. **Cross-platform**: Consider Windows, macOS, Linux in all decisions
4. **User-centric**: Clear documentation, helpful error messages, flexible configuration
5. **Clean code**: Type hints, proper error handling, extracted testable functions

## Current Version: 0.0.2
### Major Features
- Real-time image compression monitoring
- Two modes: watch-only (default) and scan+watch (--process-existing)
- Support for JPEG, PNG, WebP, AVIF formats
- Configurable quality settings and worker threads
- Environment variable configuration (IMGC_* prefix)
- Cross-platform binary builds

### Recent Improvements
- Added --process-existing flag for initial image processing
- Fixed Windows path handling issues
- Enhanced PyInstaller builds with better dependency inclusion
- Improved test coverage and code quality
- Added comprehensive documentation and CI/CD

## Code Quality Highlights
- Type hints throughout codebase
- Extracted environment parsing functions for testability
- Proper resource cleanup and timeout handling
- Cross-platform path normalization
- Comprehensive error handling with user-friendly messages
- Clean separation of concerns between modules

## Common Development Patterns
- Use pathlib.Path for all file operations
- Implement timeouts for potentially long operations
- Use daemon threads for background processing
- Extract constants for magic values (e.g., ENV_TRUE_VALUES)
- Test actual implementation, not duplicated logic
- Use proper logging levels with structured messages

## Build and Release System
- Automated cross-platform builds (Windows, Linux, macOS, x64, ARM64)
- GitHub Actions workflows for testing and releases
- PyInstaller with platform-specific hidden imports
- Automatic changelog generation and binary checksums
- Semantic versioning with pre-release support

## Testing Strategy
- Unit tests for individual functions
- Integration tests for workflows
- Mocking with pytest monkeypatch
- Temporary file handling with tmp_path
- Environment variable testing
- Cross-platform compatibility testing

## Configuration Architecture
- Centralized defaults in config.py
- Environment variable support with type conversion
- Command line argument parsing with validation
- Proper path normalization and validation
- User-friendly error messages for invalid inputs

## Performance Characteristics
- Efficient file watching with minimal resource usage
- Optional batch processing for existing files
- Configurable worker threads for parallel processing
- File stability detection to avoid processing incomplete files
- Cooldown periods to prevent repeated processing

## Maintenance Notes
- Keep requirements.txt minimal and well-documented
- Update PyInstaller hidden imports when adding dependencies
- Test all changes on multiple platforms
- Maintain backward compatibility where possible
- Document breaking changes prominently

## Future Enhancement Areas
- Configuration file support (.imgcrc)
- Plugin architecture for additional formats
- Performance profiling and optimization
- Integration with cloud storage services
- GUI interface for non-technical users

This project demonstrates excellent software engineering practices with comprehensive testing, documentation, and cross-platform support.
